version: "3.8"

services:

  api_gateway:
    build:
      context: ./Api_gateway/
      dockerfile: Dockerfile
    container_name: api_gateway
    restart: on-failure
    ports:
      - "8000:8000"
    depends_on:
      tweet_service:
        condition: service_healthy
      auth_service:
        condition: service_healthy
      profile_service:
        condition: service_healthy

  auth_service:
    image: auth_service
    build:
      context: .
      dockerfile: ./Auth/Dockerfile
    restart: always
    container_name: 'auth_service'
    hostname: 'auth_service'
    environment:
      - MONGO_DB_URI=mongodb://auth_db:27017
      - app_port=${AUTH_SERVICE_PORT}
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
    depends_on:
      auth_db:
        condition: service_healthy

  tweet_service:
    image: tweet_service
    build:
      context: .
      dockerfile: ./Tweet/Dockerfile
    restart: always
    container_name: 'tweet_service'
    hostname: 'tweet_service'
    environment:
      - CASS_DB_URI=tweet_db:9042
      - app_port=${TWEET_SERVICE_PORT}
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
    depends_on:
      tweet_db:
        condition: service_healthy

  profile_service:
    image: profile_service
    build:
      context: .
      dockerfile: ./Profile/Dockerfile
    restart: always
    container_name: 'profile_service'
    hostname: 'profile_service'
    environment:
      - MONGO_DB_URI=mongodb://profile_db:27017
      - app_port=${PROFILE_SERVICE_PORT}
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
    depends_on:
      profile_db:
        condition: service_healthy

  auth_db:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_DATABASE: mongoDemo
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
    volumes:
      - mongo_store:/data/mongoAuth

  profile_db:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_DATABASE: mongoDemo
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
    volumes:
      - mongo_store:/data/mongoProfile

  tweet_db:
    image: cassandra
    restart: always
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -e 'describe cluster'" ]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - mongo_store:/data/mongoTweet

volumes:
    mongo_store: