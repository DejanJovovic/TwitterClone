version: "3.8"

services:

  auth_service:
    image: auth_service
    container_name: auth_service
    build:
      context: .
      dockerfile: ./Auth/Dockerfile
    restart: always
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
#    environment:
#      SHIPPING_DB_HOST: ${SHIPPING_DB_HOST}
#      SHIPPING_DB_PORT: ${SHIPPING_DB_PORT}
#      SHIPPING_SERVICE_PORT: ${SHIPPING_SERVICE_PORT}
#    depends_on:
#      - shipping_db
    networks:
      - network

  tweet_service:
    image: tweet_service
    container_name: tweet_service
    build:
      context: .
      dockerfile: ./Tweet/Dockerfile
    restart: always
    ports:
      - ${TWEET_SERVICE_PORT}:${TWEET_SERVICE_PORT}
#    environment:
#      INVENTORY_DB_HOST: ${INVENTORY_DB_HOST}
#      INVENTORY_DB_PORT: ${INVENTORY_DB_PORT}
#      INVENTORY_DB_USER: ${INVENTORY_DB_USER}
#      INVENTORY_DB_PASS: ${INVENTORY_DB_PASS}
#      INVENTORY_DB_NAME: ${INVENTORY_DB_NAME}
#      INVENTORY_SERVICE_PORT: ${INVENTORY_SERVICE_PORT}
#    depends_on:
#      - inventory_db
    networks:
      - network

  auth_db:
    image: mongo
    container_name: auth_db
    restart: on-failure
    networks:
      - network

  tweet_db:
    image: mongo
    container_name: tweet_db
    restart: on-failure
#    environment:
#      POSTGRES_USER: ${INVENTORY_DB_USER}
#      POSTGRES_PASSWORD: ${INVENTORY_DB_PASS}
#      POSTGRES_DB: ${INVENTORY_DB_NAME}
    networks:
      - network

networks:
  network:
    driver: bridge