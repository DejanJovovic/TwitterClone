version: "3.8"

services:

  auth_service:
    image: auth_service
    build:
      context: .
      dockerfile: ./Auth/Dockerfile
    restart: always
    container_name: 'auth_service'
    hostname: 'auth_service'
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
    environment:
      - MONGO_DB_URI=mongodb://mongo:27017
      - app_port=${AUTH_SERVICE_PORT}
    networks:
      - network
    depends_on:
      auth_db:
        condition: service_healthy

#  tweet_service:
#    image: tweet_service
#    container_name: tweet_service
#    build:
#      context: .
#      dockerfile: ./Tweet/Dockerfile
#    restart: "no"
#    ports:
#      - ${TWEET_SERVICE_PORT}:${TWEET_SERVICE_PORT}
#    environment:
#      - MONGO_DB_URI:mongodb://root:pass@mongo:27017
#      - app_port=${TWEET_SERVICE_PORT}
#    networks:
#      - network

  auth_db:
    image: mongo
    restart: always
    ports:
      - ${AUTH_DB_PORT}:${AUTH_DB_PORT}
    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_store:/data/mongoAuth/mongo

#  tweet_db:
#    image: mongo
#    container_name: tweet_db
#    restart: on-failure
#    networks:
#      - network

networks:
  network:
    driver: bridge

volumes:
    mongo_store:
    mong_express_data: